/* ========================================================================
 * Fluid CSS Utility Classes
 * ------------------------------------------------------------------------
 * This file contains single-purpose utility classes for rapid styling.
 * Each section is documented with usage examples and follows a consistent
 * naming convention: .utility[-modifier] (e.g., .shadow-sm, .rounded-lg)
 * ======================================================================== */

/* ------------------------------------------------------------------------
 * Shadow Utilities
 * Usage: Add shadow to elements for elevation effects.
 * Example: <div class="shadow-md"></div>
 * ------------------------------------------------------------------------ */
.shadow-sm {
  box-shadow: var(--shadow-sm);
}

.shadow-md {
  box-shadow: var(--shadow-md);
}

.shadow-lg {
  box-shadow: var(--shadow-lg);
}

.shadow-xs {
  box-shadow: 0 1px 1px rgb(0 0 0 / 3%);
}

.shadow-xl {
  box-shadow: 0 8px 32px rgb(0 0 0 / 18%);
}

/* ------------------------------------------------------------------------
 * Border Radius Utilities
 * Usage: Control border radius for rounded corners.
 * Example: <img class="rounded-lg" />
 * ------------------------------------------------------------------------ */
.rounded {
  border-radius: var(--radius);
}

.rounded-sm {
  border-radius: var(--radius-sm);
}

.rounded-lg {
  border-radius: var(--radius-lg);
}

.rounded-full {
  border-radius: var(--radius-full);
}

.rounded-t {
  border-top-left-radius: var(--radius);
  border-top-right-radius: var(--radius);
}

.rounded-b {
  border-bottom-left-radius: var(--radius);
  border-bottom-right-radius: var(--radius);
}

/* ------------------------------------------------------------------------
 * Z-Index Utilities
 * Usage: Set stacking order for positioned elements.
 * Example: <div class="z-10"></div>
 * ------------------------------------------------------------------------ */
.z-0 {
  z-index: var(--z-0);
}

.z-10 {
  z-index: var(--z-10);
}

.z-50 {
  z-index: var(--z-50);
}

.z-100 {
  z-index: var(--z-100);
}

.z-auto {
  z-index: var(--z-auto);
}

/* ------------------------------------------------------------------------
 * Aspect Ratio Utilities
 * Usage: Maintain aspect ratio for media elements.
 * Example: <div class="aspect-16-9"></div>
 * ------------------------------------------------------------------------ */
.aspect-16-9 {
  aspect-ratio: 16 / 9;
}

.aspect-1-1 {
  aspect-ratio: 1 / 1;
}

.aspect-4-3 {
  aspect-ratio: 4 / 3;
}

/* ------------------------------------------------------------------------
 * Text Truncation & Overflow Utilities
 * Usage: Truncate text or control overflow.
 * Example: <span class="truncate"></span>
 * ------------------------------------------------------------------------ */
.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.overflow-auto {
  overflow: auto;
}

.overflow-hidden {
  overflow: hidden;
}

/* ------------------------------------------------------------------------
 * Opacity Utilities
 * Usage: Set element opacity.
 * Example: <div class="opacity-75"></div>
 * ------------------------------------------------------------------------ */
.opacity-50 {
  opacity: 0.5;
}

.opacity-75 {
  opacity: 0.75;
}

.opacity-90 {
  opacity: 0.9;
}

/* ------------------------------------------------------------------------
 * Letter Spacing & Text Transform Utilities
 * Usage: Adjust letter spacing or text case.
 * Example: <span class="uppercase tracking-wide"></span>
 * ------------------------------------------------------------------------ */
.tracking-wide {
  letter-spacing: 0.05em;
}

.uppercase {
  text-transform: uppercase;
}

.capitalize {
  text-transform: capitalize;
}

/* ------------------------------------------------------------------------
 * List Style Utilities
 * Usage: Control list marker style and position.
 * Example: <ul class="list-disc list-inside"></ul>
 * ------------------------------------------------------------------------ */
.list-none {
  list-style: none;
}

.list-disc {
  list-style: disc;
}

.list-inside {
  list-style-position: inside;
}

/* ------------------------------------------------------------------------
 * Cursor & Pointer Events Utilities
 * Usage: Control cursor and pointer events.
 * Example: <button class="cursor-pointer"></button>
 * ------------------------------------------------------------------------ */
.cursor-pointer {
  cursor: pointer;
}

.pointer-events-none {
  pointer-events: none;
}

/* ------------------------------------------------------------------------
 * Logical Properties (RTL/LTR Support)
 * Usage: Use logical margin/padding for better i18n support.
 * Example: <div class="p-inline-md m-block-lg"></div>
 * ------------------------------------------------------------------------ */
.p-inline-md {
  padding-inline: var(--spacing-md);
}

.m-block-lg {
  margin-block: var(--spacing-lg);
}

/* ------------------------------------------------------------------------
 * Min/Max Width & Height Utilities
 * Usage: Set min/max/viewport width and height.
 * Example: <div class="min-h-100 w-screen"></div>
 * ------------------------------------------------------------------------ */
.min-h-100 {
  min-height: 100vh;
}

.max-w-screen {
  max-width: 100vw;
}

.w-screen {
  width: 100vw;
}

/* ------------------------------------------------------------------------
 * Responsive Images & Embeds
 * Usage: Make images and embeds fluid and responsive.
 * Example: <img class="img-fluid" />
 * ------------------------------------------------------------------------ */
img,
.wp-block-image img,
video,
iframe,
embed,
object {
  max-width: 100%;
  height: auto;
  display: block;
}

/* ------------------------------------------------------------------------
 * Border Utilities
 * Usage: Add or remove borders, or set border color.
 * Example: <div class="border-accent"></div>
 * ------------------------------------------------------------------------ */
.border {
  border: 1px solid var(--color-border);
}

.border-0 {
  border: none;
}

.border-accent {
  border: 1px solid var(--color-primary);
}

/* ------------------------------------------------------------------------
 * Font Style & Decoration Utilities
 * Usage: Set underline, line-through, italic, or normal case.
 * Example: <span class="underline italic"></span>
 * ------------------------------------------------------------------------ */
.underline {
  text-decoration: underline;
}

.line-through {
  text-decoration: line-through;
}

.italic {
  font-style: italic;
}

.normal-case {
  text-transform: none;
}

/* ------------------------------------------------------------------------
 * Responsive Visibility Utilities
 * Usage: Show/hide elements for print or screen.
 * Example: <div class="hide-print show-screen"></div>
 * ------------------------------------------------------------------------ */
.hide-print {
  display: block;
}

.show-print {
  display: none;
}

@media print {
  .hide-print {
    display: none !important;
  }

  .show-print {
    display: block !important;
  }
}

.hide-screen {
  display: none;
}

.show-screen {
  display: block;
}

@media screen {
  .hide-screen {
    display: none !important;
  }

  .show-screen {
    display: block !important;
  }
}

/* ------------------------------------------------------------------------
 * Alignment & Justification Utilities (Flex & Grid)
 * ------------------------------------------------------------------------
 * Atomic utility classes for all alignment and justification properties.
 * Use these for flexbox and grid layouts to control alignment, justification,
 * and placement of items, content, and self. These classes are single-purpose
 * and can be freely combined for any layout system.
 *
 * Usage Example:
 *   <div class="flex align-items-center justify-content-between"></div>
 *   <div class="grid place-items-center gap-md"></div>
 *
 * For gap utilities, see _spacing.css.
 * ------------------------------------------------------------------------ */

/* Align Items (Flex & Grid)
 * Aligns children vertically in flex containers, or along the block axis in grid containers.
 */
.align-items-start {
  align-items: flex-start;
}

.align-items-end {
  align-items: flex-end;
}

.align-items-center {
  align-items: center;
}

.align-items-baseline {
  align-items: baseline;
}

.align-items-stretch {
  align-items: stretch;
}

/* Justify Items (Grid Only)
 * Aligns grid children horizontally within their grid area. Not supported in flex layouts.
 */
.justify-items-start {
  justify-items: start;
}

.justify-items-end {
  justify-items: end;
}

.justify-items-center {
  justify-items: center;
}

.justify-items-stretch {
  justify-items: stretch;
}

/* Align Content (Flex & Grid)
 * Aligns rows (grid) or lines (flex) within the container.
 */
.align-content-start {
  align-content: flex-start;
}

.align-content-end {
  align-content: flex-end;
}

.align-content-center {
  align-content: center;
}

.align-content-between {
  align-content: space-between;
}

.align-content-around {
  align-content: space-around;
}

.align-content-evenly {
  align-content: space-evenly;
}

.align-content-stretch {
  align-content: stretch;
}

/* Justify Content (Flex & Grid)
 * Aligns children horizontally in flex containers, or distributes space between grid tracks.
 */
.justify-content-start {
  justify-content: flex-start;
}

.justify-content-end {
  justify-content: flex-end;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-between {
  justify-content: space-between;
}

.justify-content-around {
  justify-content: space-around;
}

.justify-content-evenly {
  justify-content: space-evenly;
}

.justify-content-stretch {
  justify-content: stretch;
}

/* Align Self (Flex & Grid)
 * Overrides align-items for a single flex/grid child.
 */
.align-self-auto {
  align-self: auto;
}

.align-self-start {
  align-self: flex-start;
}

.align-self-end {
  align-self: flex-end;
}

.align-self-center {
  align-self: center;
}

.align-self-stretch {
  align-self: stretch;
}

.align-self-baseline {
  align-self: baseline;
}

/* Justify Self (Grid Only)
 * Overrides justify-items for a single grid child. Not supported in flex layouts.
 */
.justify-self-auto {
  justify-self: auto;
}

.justify-self-start {
  justify-self: flex-start;
}

.justify-self-end {
  justify-self: flex-end;
}

.justify-self-center {
  justify-self: center;
}

.justify-self-stretch {
  justify-self: stretch;
}

.justify-self-left {
  justify-self: left;
}

.justify-self-right {
  justify-self: right;
}

/* Place Content (Grid Only)
 * Shorthand for align-content and justify-content in grid containers.
 */
.place-content-center {
  place-content: center;
}

.place-content-start {
  place-content: start;
}

.place-content-end {
  place-content: end;
}

.place-content-stretch {
  place-content: stretch;
}

.place-content-between {
  place-content: space-between;
}

.place-content-around {
  place-content: space-around;
}

.place-content-evenly {
  place-content: space-evenly;
}

.place-content-auto {
  place-content: normal;
}

/* Place Items (Grid Only)
 * Shorthand for align-items and justify-items in grid containers.
 */
.place-items-center {
  place-items: center;
}

.place-items-start {
  place-items: start;
}

.place-items-end {
  place-items: end;
}

.place-items-stretch {
  place-items: stretch;
}

/* Place Self (Grid Only)
 * Shorthand for align-self and justify-self for a single grid child.
 */
.place-self-auto {
  place-self: auto;
}

.place-self-center {
  place-self: center;
}

.place-self-start {
  place-self: start;
}

.place-self-end {
  place-self: end;
}

.place-self-stretch {
  place-self: stretch;
}

/*
  These utilities are atomic and can be used with both flex and grid layouts.
  For gap utilities, see _spacing.css.
*/
